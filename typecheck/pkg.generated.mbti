// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/MiniMoonbit/typecheck"

import(
  "Kaida-Amethyst/either"
  "moonbitlang/MiniMoonbit/parser"
)

// Values

// Errors
pub(all) suberror TypeCheckError String
fn TypeCheckError::output(Self, &Logger) -> Unit // from trait `Show`
fn TypeCheckError::to_string(Self) -> String // from trait `Show`
impl Show for TypeCheckError

// Types and methods
pub(all) struct ApplyExpr {
  kind : ApplyExprKind
  ty : TypeKind
}
fn ApplyExpr::output(Self, &Logger) -> Unit // from trait `Show`
fn ApplyExpr::to_string(Self) -> String // from trait `Show`
impl Show for ApplyExpr

pub(all) enum ApplyExprKind {
  AtomExpr(AtomExpr)
  ArrayAccess(ApplyExpr, Expr)
  FieldAccess(ApplyExpr, String)
  Call(ApplyExpr, Array[Expr])
}
fn ApplyExprKind::output(Self, &Logger) -> Unit // from trait `Show`
fn ApplyExprKind::to_string(Self) -> String // from trait `Show`
impl Show for ApplyExprKind

pub(all) enum AssignOp {
  Assign
  PlusAssign
  MinusAssign
  MultAssign
  DivAssign
  ModAssign
}
fn AssignOp::equal(Self, Self) -> Bool // from trait `Eq`
#deprecated
fn AssignOp::op_equal(Self, Self) -> Bool // from trait `Eq`
fn AssignOp::output(Self, &Logger) -> Unit // from trait `Show`
fn AssignOp::to_string(Self) -> String // from trait `Show`
impl Eq for AssignOp
impl Show for AssignOp

pub(all) struct AssignStmt {
  left_value : LeftValue
  op : AssignOp
  expr : Expr
}
fn AssignStmt::output(Self, &Logger) -> Unit // from trait `Show`
fn AssignStmt::to_string(Self) -> String // from trait `Show`
impl Show for AssignStmt

pub(all) struct AtomExpr {
  kind : AtomExprKind
  ty : TypeKind
}
fn AtomExpr::output(Self, &Logger) -> Unit // from trait `Show`
fn AtomExpr::to_string(Self) -> String // from trait `Show`
impl Show for AtomExpr

pub(all) enum AtomExprKind {
  Int(Int)
  Double(Double)
  Bool(Bool)
  String(String)
  Ident(String)
  Unit
  Paren(Expr)
  Tuple(Array[Expr])
  Array(Array[Expr])
  ArrayMake(Expr, Expr)
  StructConstruct(StructConstructExpr)
}
fn AtomExprKind::output(Self, &Logger) -> Unit // from trait `Show`
fn AtomExprKind::to_string(Self) -> String // from trait `Show`
impl Show for AtomExprKind

pub(all) enum BinaryOp {
  Add
  Sub
  Mul
  Div
  Mod
  ShiftLeft
  ShiftRight
  Eq
  NE
  LT
  GT
  LE
  GE
  And
  Or
  BitAnd
  BitOr
}
fn BinaryOp::equal(Self, Self) -> Bool // from trait `Eq`
#deprecated
fn BinaryOp::op_equal(Self, Self) -> Bool // from trait `Eq`
fn BinaryOp::output(Self, &Logger) -> Unit // from trait `Show`
fn BinaryOp::to_string(Self) -> String // from trait `Show`
impl Eq for BinaryOp
impl Show for BinaryOp

pub(all) struct BlockExpr {
  stmts : Array[Stmt]
  ty : TypeKind
}
fn BlockExpr::output(Self, &Logger) -> Unit // from trait `Show`
fn BlockExpr::to_string(Self) -> String // from trait `Show`
impl Show for BlockExpr

pub(all) struct Context {
  mut type_env : Env
  type_vars : Map[Int, TypeKind]
  struct_defs : Map[String, StructDef]
  func_types : Map[String, TypeKind]
  mut current_func_ret_ty : TypeKind?
}
fn Context::add_type_var(Self) -> TypeKind
fn Context::check_apply_expr(Self, @parser.ApplyExpr) -> ApplyExpr raise TypeCheckError
fn Context::check_array_expr(Self, Array[@parser.Expr]) -> (AtomExprKind, TypeKind) raise TypeCheckError
fn Context::check_array_make_expr(Self, @parser.Expr, @parser.Expr) -> (AtomExprKind, TypeKind) raise TypeCheckError
fn Context::check_assign_stmt(Self, @parser.AssignStmt) -> AssignStmt raise TypeCheckError
fn Context::check_atom_expr(Self, @parser.AtomExpr) -> AtomExpr raise TypeCheckError
fn Context::check_block_expr(Self, @parser.BlockExpr) -> BlockExpr raise TypeCheckError
fn Context::check_expr(Self, @parser.Expr) -> Expr raise TypeCheckError
fn Context::check_if_expr(Self, @parser.IfExpr) -> IfExpr raise TypeCheckError
fn Context::check_left_value(Self, @parser.LeftValue) -> LeftValue raise TypeCheckError
fn Context::check_let_mut_stmt(Self, @parser.LetMutStmt) -> LetMutStmt raise TypeCheckError
fn Context::check_let_stmt(Self, @parser.LetStmt) -> LetStmt raise TypeCheckError
fn Context::check_local_function(Self, @parser.LocalFunction) -> LocalFunction raise TypeCheckError
fn Context::check_parser_type(Self, @parser.Type, mutable? : Bool) -> Type raise TypeCheckError
fn Context::check_parser_typekind(Self, @parser.TypeKind) -> TypeKind raise TypeCheckError
fn Context::check_program(Self, @parser.Program) -> Program raise TypeCheckError
fn Context::check_stmt(Self, @parser.Stmt) -> Stmt raise TypeCheckError
fn Context::check_struct_construct_expr(Self, @parser.StructConstructExpr) -> (AtomExprKind, TypeKind) raise TypeCheckError
fn Context::check_struct_def(Self, @parser.StructDef) -> StructDef raise TypeCheckError
fn Context::check_top_function(Self, @parser.TopFunction) -> TopFunction raise TypeCheckError
fn Context::check_top_let(Self, @parser.TopLet) -> TopLet raise TypeCheckError
fn Context::check_tuple_expr(Self, Array[@parser.Expr]) -> (AtomExprKind, TypeKind) raise TypeCheckError
fn Context::check_while_stmt(Self, @parser.WhileStmt) -> WhileStmt raise TypeCheckError
fn Context::collect_function_types(Self, @parser.Program) -> Unit raise TypeCheckError
fn Context::collect_struct_names(Self, @parser.Program) -> Unit raise TypeCheckError
fn Context::enter_scope(Self) -> Unit
fn Context::exit_scope(Self) -> Unit
fn Context::is_type_compatible(Self, TypeKind, TypeKind) -> Bool raise TypeCheckError
fn Context::lookup_type(Self, String) -> Type?
fn Context::new() -> Self
fn Context::set_current_func_ret_ty(Self, TypeKind) -> Unit

pub(all) struct Env {
  local_ : Map[String, Type]
  parent : Env?
}
fn Env::get(Self, String) -> Type?
fn Env::new(parent? : Self?) -> Self
fn Env::set(Self, String, Type) -> Unit

pub(all) struct Expr {
  kind : ExprKind
  ty : TypeKind
}
fn Expr::output(Self, &Logger) -> Unit // from trait `Show`
fn Expr::to_string(Self) -> String // from trait `Show`
impl Show for Expr

pub(all) enum ExprKind {
  ApplyExpr(ApplyExpr)
  BlockExpr(BlockExpr)
  NotExpr(Expr)
  NegExpr(Expr)
  BinaryExpr(BinaryOp, Expr, Expr)
  IfExpr(IfExpr)
}
fn ExprKind::output(Self, &Logger) -> Unit // from trait `Show`
fn ExprKind::to_string(Self) -> String // from trait `Show`
impl Show for ExprKind

pub(all) struct IfExpr {
  cond : Expr
  then_block : BlockExpr
  else_block : @either.Either[IfExpr, BlockExpr]?
  ty : TypeKind
}
fn IfExpr::output(Self, &Logger) -> Unit // from trait `Show`
fn IfExpr::to_string(Self) -> String // from trait `Show`
impl Show for IfExpr

pub(all) struct LeftValue {
  kind : LeftValueKind
  ty : Type
}
fn LeftValue::output(Self, &Logger) -> Unit // from trait `Show`
fn LeftValue::to_string(Self) -> String // from trait `Show`
impl Show for LeftValue

pub(all) enum LeftValueKind {
  Ident(String)
  ArrayAccess(LeftValue, Expr)
  FieldAccess(LeftValue, String)
}
fn LeftValueKind::output(Self, &Logger) -> Unit // from trait `Show`
fn LeftValueKind::to_string(Self) -> String // from trait `Show`
impl Show for LeftValueKind

pub(all) struct LetMutStmt {
  name : String
  ty : Type
  expr : Expr
}
fn LetMutStmt::output(Self, &Logger) -> Unit // from trait `Show`
fn LetMutStmt::to_string(Self) -> String // from trait `Show`
impl Show for LetMutStmt

pub(all) struct LetStmt {
  pattern : Pattern
  ty : TypeKind
  expr : Expr
}
fn LetStmt::output(Self, &Logger) -> Unit // from trait `Show`
fn LetStmt::to_string(Self) -> String // from trait `Show`
impl Show for LetStmt

pub(all) struct LocalFunction {
  fname : String
  param_list : Array[(String, Type)]
  ret_ty : Type
  body : BlockExpr
}
fn LocalFunction::output(Self, &Logger) -> Unit // from trait `Show`
fn LocalFunction::to_string(Self) -> String // from trait `Show`
impl Show for LocalFunction

pub(all) struct Param {
  name : String
  ty : TypeKind
}
fn Param::output(Self, &Logger) -> Unit // from trait `Show`
fn Param::to_string(Self) -> String // from trait `Show`
impl Show for Param

pub(all) struct Pattern {
  kind : PatternKind
}
fn Pattern::equal(Self, Self) -> Bool // from trait `Eq`
#deprecated
fn Pattern::op_equal(Self, Self) -> Bool // from trait `Eq`
fn Pattern::output(Self, &Logger) -> Unit // from trait `Show`
fn Pattern::to_string(Self) -> String // from trait `Show`
impl Eq for Pattern
impl Show for Pattern

pub(all) enum PatternKind {
  Wildcard
  Ident(String)
  Tuple(Array[Pattern])
}
fn PatternKind::equal(Self, Self) -> Bool // from trait `Eq`
#deprecated
fn PatternKind::op_equal(Self, Self) -> Bool // from trait `Eq`
fn PatternKind::output(Self, &Logger) -> Unit // from trait `Show`
fn PatternKind::to_string(Self) -> String // from trait `Show`
impl Eq for PatternKind
impl Show for PatternKind

pub(all) struct Program {
  top_lets : Map[String, TopLet]
  top_functions : Map[String, TopFunction]
  struct_defs : Map[String, StructDef]
}
fn Program::output(Self, &Logger) -> Unit // from trait `Show`
fn Program::to_string(Self) -> String // from trait `Show`
impl Show for Program

pub(all) struct Stmt {
  kind : StmtKind
}
fn Stmt::output(Self, &Logger) -> Unit // from trait `Show`
fn Stmt::to_string(Self) -> String // from trait `Show`
impl Show for Stmt

pub(all) enum StmtKind {
  LetStmt(LetStmt)
  LetMutStmt(LetMutStmt)
  AssignStmt(AssignStmt)
  WhileStmt(WhileStmt)
  ExprStmt(Expr)
  ReturnStmt(Expr?)
  LocalFunction(LocalFunction)
}
fn StmtKind::output(Self, &Logger) -> Unit // from trait `Show`
fn StmtKind::to_string(Self) -> String // from trait `Show`
impl Show for StmtKind

pub(all) struct StructConstructExpr {
  name : String
  fields : Array[(String, Expr)]
}
fn StructConstructExpr::output(Self, &Logger) -> Unit // from trait `Show`
fn StructConstructExpr::to_string(Self) -> String // from trait `Show`
impl Show for StructConstructExpr

pub(all) struct StructDef {
  name : String
  fields : Array[StructField]
}
fn StructDef::get_field_type(Self, String) -> Type?
fn StructDef::output(Self, &Logger) -> Unit // from trait `Show`
fn StructDef::to_string(Self) -> String // from trait `Show`
impl Show for StructDef

pub(all) struct StructField {
  name : String
  ty : Type
}
fn StructField::output(Self, &Logger) -> Unit // from trait `Show`
fn StructField::to_string(Self) -> String // from trait `Show`
impl Show for StructField

pub(all) struct TopFunction {
  fname : String
  param_list : Array[Param]
  ret_ty : TypeKind
  body : BlockExpr
}
fn TopFunction::output(Self, &Logger) -> Unit // from trait `Show`
fn TopFunction::to_string(Self) -> String // from trait `Show`
impl Show for TopFunction

pub struct TopLet {
  name : String
  ty : Type
  expr : Expr
}
fn TopLet::output(Self, &Logger) -> Unit // from trait `Show`
fn TopLet::to_string(Self) -> String // from trait `Show`
impl Show for TopLet

pub(all) struct Type {
  kind : TypeKind
  mutable : Bool
}
fn Type::output(Self, &Logger) -> Unit // from trait `Show`
fn Type::to_string(Self) -> String // from trait `Show`
impl Show for Type

pub(all) enum TypeKind {
  Unit
  Bool
  Int
  Double
  String
  Tuple(Array[TypeKind])
  Array(TypeKind)
  Function(Array[TypeKind], TypeKind)
  Struct(String)
  Any
  TypeVar(Int)
}
fn TypeKind::hash(Self) -> Int // from trait `Hash`
fn TypeKind::hash_combine(Self, Hasher) -> Unit // from trait `Hash`
fn TypeKind::output(Self, &Logger) -> Unit // from trait `Show`
fn TypeKind::to_string(Self) -> String // from trait `Show`
impl Hash for TypeKind
impl Show for TypeKind

pub(all) struct WhileStmt {
  cond : Expr
  body : BlockExpr
}
fn WhileStmt::output(Self, &Logger) -> Unit // from trait `Show`
fn WhileStmt::to_string(Self) -> String // from trait `Show`
impl Show for WhileStmt

// Type aliases

// Traits

