/// ================================================================================
/// # 🎉 终章：完成类型检查器
///
/// 🎊 **恭喜你！你已经来到了类型检查阶段的最后一关！** 🎊
///
/// 经过前面的所有挑战，你已经构建了一个功能强大的类型检查系统。现在，是时候完成最后的步骤：
/// 实现 `typechecker.mbt` 中的 `typecheck` 函数，它将遍历整个语法树，将所有 `TypeVar` 替换为具体的实体类型。
///
/// ## 🎯 你的任务：实现 `typecheck` 函数
///
/// `typecheck` 函数是整个类型检查阶段的最终入口。它的核心任务是：
///
/// 1. **遍历整个语法树**：从程序的根节点开始，递归地访问每一个语法节点
/// 2. **替换类型变量**：将 AST 中所有的 `TypeVar` 替换为通过类型检查得到的实际类型
/// 3. **返回类型化的 AST**：返回一个所有类型都已确定的语法树
///
/// ### 💡 实现思路
///
/// 你已经实现了 `check_program` 函数，它会：
/// - 进行完整的类型检查
/// - 在 `Context` 中记录所有类型信息
/// - 确保程序在类型层面是正确的
///
/// 现在，你需要实现 `typecheck` 函数，它会：
/// - 调用 `check_program` 进行类型检查
/// - 遍历 AST，将 `TypeVar` 替换为实际类型
/// - 返回类型化后的 AST
///
/// **关键步骤：**
///
/// 1. **调用类型检查**：使用 `check_program` 对程序进行类型检查
/// 2. **遍历替换**：实现一个遍历函数，递归地访问每个节点
/// 3. **类型替换**：对于包含 `TypeVar` 的节点，从 `Context` 中查找对应的实际类型并替换
/// 4. **保持结构**：确保替换后的 AST 结构与原始结构完全一致
///
/// ## 🚀 见证你的成果！
///
/// 完成这个任务后，你就拥有了一个功能完备的 MiniMoonBit 类型检查器！
/// 你可以运行以下命令来测试你的实现：
///
/// ```bash
/// moon test -p typecheck -f typechecker_test.mbt
/// ```
///
/// 这个测试会验证你的 `typecheck` 函数是否正确地将所有 `TypeVar` 替换为了具体的类型。
///
/// ## 🎊 恭喜你完成了类型检查的所有内容！
///
/// 你已经成功构建了一个完整的类型检查系统，包括：
/// - ✅ 基础类型检查
/// - ✅ 表达式类型推断
/// - ✅ 语句类型检查
/// - ✅ 函数类型检查
/// - ✅ 结构体类型检查
/// - ✅ 程序级类型检查
/// - ✅ 类型变量替换
///
/// **这是一个了不起的成就！** 你已经掌握了现代编译器中最核心的静态分析技术之一。
///
/// **接下来，我们将进入编译器的下一个激动人心的阶段：KNF 转换！**
/// ================================================================================

///|
test "Program TypeCheck Test" {
  let code =
    #|let a = 3;
    #|let b = 4;
    #|fn fold(arr: Array[Int], f: (Int, Int) -> Int, init: Int) -> Int { 
    #|  let mut result = init;
    #|  let mut i = 0; 
    #|  while i < arr.length() {
    #|    result = f(result, arr[i]);
    #|  }
    #|  result
    #|}
    #|
    #|fn main {
    #|  fn max(a, b) { if a > b { a } else { b } }
    #|  fn min(a, b) { if a < b { a } else { b } }
    #|  let numbers = [a, 1, b, 1, 5, 9, 2, 6, 5];
    #|  let maximum = fold(numbers, max, -1000);
    #|  let minimum = fold(numbers, min, 1000);
    #|  let max_min_diff = maximum - minimum;
    #|  print_int(max_min_diff);
    #|}
  let tokens = @lexer.tokenize(code)
  let program = @parser.parse(tokens)
  let program = typecheck(program)
  let program_str = program.to_string()
  assert_false(program_str.contains("TypeVar"))
}
